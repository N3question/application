first_appでは、

1.Homesコントローラを作成する
2.コントローラ内にtopアクションを作成する
3.app/views/homes/top.html.erbを作成する
4.config/routes.rbにhomes#topに対応するRoutingを作成する
といった手順で実装

＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝
Railsはコントローラ作成と同時に、
必要なviewファイルの作成や記述の追加を、
簡単に実現できる
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝

▼　その方法
ーーーーーーーーーーーーーーー
$ rails g controller homes top
ーーーーーーーーーーーーーーー


＜Listsコントローラ＞
listsコントローラというコントローラを新しく作っていきます。 
listsコントローラはhomesコントローラと違い、
その名の通りListモデルを扱うコントローラです。



＜Listsコントローラに定義するアクション＞
# モデルを扱うコントローラでは、データを操作するための
# 7つのアクションを以下の名前で定義するのが一般的

new      ...データの新規作成フォームを表示する
create   ...データを追加（保存）する
index    ...データの一覧を表示する
show     ...データの内容（詳細）を表示する
edit     ...データを更新するためのフォームを表示する
update   ...データを更新する
destroy  ...データを削除する


▷--２章


＜投稿までの処理の流れ＞
1.フォーム画面を表示する
2.フォームにデータを入力し、送信する
3.送信内容をデータベースへ保存する
4.保存した後に別のページに移動する(リダイレクト)




＜HTTPリクエストについて＞
ブラウザは表示したい（取得したい）ページを表示するために、欲しいページやデータを持っているサーバーに対して
お願いするような形でリクエストをする必要があります。
これをHTTPリクエストという。

「アプリケーションのページやデータは皆さんのブラウザが持っているわけではない」

ーHTTPリクエストの種類ー
GET	　　...データの取得(ページ自体もデータ)
POST	...新しいデータの作成
PUT	　　...既存のデータの更新
PATCH	...既存のデータの一部更新
DELETE	...既存のデータを削除




＜投稿機能に必要なHTTPリクエストは次の2つ＞
GET
POST

1.投稿フォームの作成
a) ルーティングを確認し追加する
b) コントローラーの記述を確認し追加する
c) form_withヘルパーでフォームを作成する




＜form_withヘルパーとは＞
Railsには、Viewなどから呼び出す共通処理をまとめた「ヘルパーメソッド」が用意
セキュリティ対策などが組み込まれた安全なHTMLのformタグを作成でき、
またRailsの機能を最大限生かすことが可能

form_withはViewで使用することができ、基本形は次のようになっていてdoからendまでが範囲
ーーーーーーーーーーーー
<%= form_with do |f| %>
<% end %>
ーーーーーーーーーーーー
[解説]
<%で始まるタグは、Rubyで使われるタグです。

<% %>では、タグ内の結果がHTMLに変換されずに処理されます。
<%= %>では、タグ内の結果がHTMLに変換されます。


！今回作成するSampleAppでは、
フォームからデータを送信した後に
データベースへ保存する必要があるため
Listモデルと連携を行う必要があり、
その情報を含めるとform_withは次のようになります。！

[基本形からListモデルと連携したform_with]
ーーーーーーーーーーーーーーーーーーーー
<%= form_with model: List.new do |f| %>
<% end %>
ーーーーーーーーーーーーーーーーーーーー


＜インスタンス変数とは＞
コントローラーアクションとViewファイルでデータの受け渡しができる変数のことで
@helloのように変数名の先頭に「@(アットマーク)」を付けることでインスタンス変数となります。

例）コントローラーのnewアクションにインスタンス変数を定義すると
　　対応するViewであるnew.html.erbでその変数を呼び出すことができるというものになります。

[コントローラ/アクション]
　ーーーーーーーーー
　def new
　 @hello = "Hello"
　end
　ーーーーーーーーー

[Viewファイル]
　ーーーーーーー
　<%= @hello %>
　ーーーーーーー
　[解説]
　ブラウザに「Hello」と出力される
　
　
＜ローカル変数＞
インスタンス変数の逆で
コントローラーとViewファイルでデータの受け渡しが
できない変数のこと

[コントローラ/アクション]
　ーーーーーーーーー
　def new
　 hello = "Hello"
　end
　ーーーーーーーーー
　[解説]
　変数名の先頭に何も付けない場合
　「＠」がなくなっている

[Viewファイル]
表示が出来ずにエラーが発生



＜違いのまとめ＞
ーインスタンス変数ー
# 変数の名前の先頭に@マークをつける
# コントローラーとViewでデータの受け渡しができる

ーローカル変数ー
# 変数の名前の先頭には何もつけない
# コントローラーとViewでデータの受け渡しができない


＜保存機能を追加する＞
１コントローラに記述を追加する
# 投稿フォームのあるページを表示するnewアクション
# 投稿を保存するためのcreateアクション
# createアクションを作成する

＜createアクション内の処理の流れ＞
1. フォームに記述した文字やデータを受け取る
2. 受け取ったデータを元にインスタンスを作成する
3. インスタンスにsaveメソッドを使いデータベースに保存する
4. 画面遷移（リダイレクト）を行う

＜ストロングパラメータ＞
●params...formから送られてくるデータはparamsの中に入っています。
●require...送られてきたデータの中からモデル名(ここでは:list)を指定し、データを絞り込みます。
●permit...requireで絞り込んだデータの中から、保存を許可するカラムを指定します。

  古いバージョンのRailsでは、実装によっては
  フォームから送られてきたデータを全て保存することができました。
  そのため、悪意のあるユーザーが改竄したデータを送信した場合も、
  そのデータは保存されてしまいます。
  これが、マスアサインメント脆弱性です。
  Railsでは、この脆弱性を防ぐ「ストロングパラメータ」の仕組みが用意されています。
  
  
＜メソッドの呼び出しに制限をかける＞
Controllerに「def list_params...」を直接書いてしまうと、アクション(URLと1対1で対応するもの)として認識されてしまいます。
例えばnewアクションは/lists/newというURLと紐づいています。
list_paramsは本来createアクションの内部で扱いたいものですが、list_paramsがアクションとして認識されてしまうと
「何らかのURLでlist_paramsだけを呼び出すことができる」という脆弱性が生じてしまいます。
そこで、「private」の行より下に記述することで、メソッドの呼び出しに制限をかけることができます。
privateより後に定義されたメソッドは、アクションとして認識されなくなり、URLと対応できなくなります。

●privateメソッド...「モデル名_params」


▷--３章


＜一覧画面表示までの流れ＞
1.コントローラで、データベースからlistsテーブルに保存されているデータを取得する
2.取得したデータをインスタンス変数に格納する
3.ビューファイルでインスタンス変数が書かれている部分を、データに置き換える
4.データから投稿を一つずつ取り出し、表示する

